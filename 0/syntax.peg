{

const ast0 = global.ast0;

const keywords = {
    'and': true,
    'const': true,
    'dep': true,
    'else': true,
    'extends': true,
    'func': true,
    'if': true,
    'in': true,
    'is': true,
    'not': true,
    'or': true,
    'out': true,
    'ret': true,
    'rol': true,
    'ror': true,
    'shl': true,
    'shr': true,
    'var': true,
    'while': true,
    'xor': true,
};

const namesBi = {
    '=': '__assign',
    '+=': '__assign_add',
    '-=': '__assign_sub',
    '|=': '__assign_or',
    '^=': '__assign_xor',
    '&=': '__assign_and',
    'or': '__or',
    'xor': '__xor',
    'and': '__and',
    '==': '__equal',
    '!=': '__not_equal',
    '<': '__less',
    '<=': '__less_equal',
    '>' : '__greater',
    '>=': '__greater_equal',
    'is': '__is',
    'in': '__in',
    '+': '__add',
    '-': '__sub',
    '|': '__bit_or',
    '^': '__bit_xor',
    '&': '__bit_and',
    '*': '__mul',
    '/': '__div',
    '%': '__mod',
    'shl': '__shl',
    'shr': '__shr',
    'rol': '__rol',
    'ror': '__ror',
};

const namesMono = {
    'not': '__not',
    '+': '__pos',
    '-': '__neg',
    '~': '__bit_not',
};

const flatten = (tree, type) => {
    let result = [];

    const collect = (item) => {
        if (item instanceof Array) {
            for (const i in item) {
                collect(item[i]);
            }
        } else if (typeof item === type && item !== null) {
            result.push(item);
        }
    };

    collect(tree);

    return result;
};

const apply = (expr, actions) => {
    actions = flatten(actions, 'function');

    for (const i in actions) {
        expr = actions[i](expr);
    }

    return expr;
};

}

Root = stmts:(_ If / _ While / _ Line)* _ {
    stmts = flatten(stmts, 'object');

    return ast0.call(
        ast0.lookup('__do'),
        stmts
    );
}

Block = '{' _ root:Root _ '}' {
    return root;
}

If = $('if' _k) _ '(' _ cond:Expr _ ')' _ body1:Block body2:(
    _ $('else' _k) _ (Block / If)
)? {
    if (body2) {
        body2 = flatten(body2, 'object');

        // TODO: body.parent should be cond
        return ast0.call(
            ast0.lookup('__if_else'),
            [
                ast0.code(
                    ast0.lookup("__self"),
                    [], [], '',
                    cond
                ),
                ast0.code(
                    ast0.lookup("__self"),
                    [], [], '',
                    body1
                ),
                ast0.code(
                    ast0.lookup("__self"),
                    [], [], '',
                    body2
                ),
            ]
        );
    } else {
        // TODO: body.parent should be cond
        return ast0.call(
            ast0.lookup('__if'),
            [
                ast0.code(
                    ast0.lookup("__self"),
                    [], [], '',
                    cond
                ),
                ast0.code(
                    ast0.lookup("__self"),
                    [], [], '',
                    body1
                ),
            ]
        );
    }
}

While = $('while' _k) _ '(' _ cond:Expr _ ')' _ body:Block {
    // TODO: body.parent should be cond
    return ast0.call(
        ast0.lookup('__while'),
        [
            ast0.code(
                ast0.lookup("__self"), [], [],
                '',
                cond
            ),
            ast0.code(
                ast0.lookup("__self"), [], [],
                '',
                body
            ),
        ]
    );
}

Line = expr:Expr _ ';' {
    return expr;
}

Expr = Expr0

Expr0 = expr:Expr1 more:(_ More0)* {
    return apply(expr, more);
}
More0 = op:('=' / '+=' / '-=' / '|=' / '^=' / '&=') _ expr:Expr1 {
    return (oldExpr) => {
        return ast0.call(
            ast0.lookup(namesBi[op]),
            [oldExpr, expr]
        );
    };
}

Expr1 = expr:Expr2 more:((_ More1or)* / (_ More1xor)* / (_ More1and)*) {
    return apply(expr, more);
}
More1or = op:$('or' _k) _ expr:Expr2 {
    return (oldExpr) => {
        return ast0.call(
            ast0.lookup(namesBi[op]),
            [oldExpr, expr]
        );
    };
}
More1xor = op:$('xor' _k) _ expr:Expr2 {
    return (oldExpr) => {
        return ast0.call(
            ast0.lookup(namesBi[op]),
            [oldExpr, expr]
        );
    };
}
More1and = op:$('and' _k) _ expr:Expr2 {
    return (oldExpr) => {
        return ast0.call(
            ast0.lookup(namesBi[op]),
            [oldExpr, expr]
        );
    };
}

Expr2 = more:(More2 _)* expr:Expr3 {
    return apply(expr, more);
}
More2 = op:$('not' _k) {
    return (expr) => {
        return ast0.call(
            ast0.lookup(namesMono[op]),
            [expr]
        );
    };
}

Expr3 = expr:Expr4 more:(_ More3)* {
    return apply(expr, more);
}
More3 = op:(
    '==' / '!=' / '<' / '<=' / '>' / '>=' /
    $('is' _k) / $('in' _k)
) _ expr:Expr4 {
    return (oldExpr) => {
        return ast0.call(
            ast0.lookup(namesBi[op]),
            [oldExpr, expr]
        );
    };
}

Expr4 = Expr4a / Expr4b

Expr4a = expr:Expr5a more:(_ More4a)* {
    return apply(expr, more);
}
More4a = op:('+' / '-') _ expr:Expr5a {
    return (oldExpr) => {
        return ast0.call(
            ast0.lookup(namesBi[op]),
            [oldExpr, expr]
        );
    };
}

Expr4b = expr:Expr5b more:((_ More4or)* / (_ More4xor)* / (_ More4and)*) {
    return apply(expr, more);
}
More4or = op:'|' _ expr:Expr5b {
    return (oldExpr) => {
        return ast0.call(
            ast0.lookup(namesBi[op]),
            [oldExpr, expr]
        );
    };
}
More4xor = op:'^' _ expr:Expr5b {
    return (oldExpr) => {
        return ast0.call(
            ast0.lookup(namesBi[op]),
            [oldExpr, expr]
        );
    };
}
More4and = op:'&' _ expr:Expr5b {
    return (oldExpr) => {
        return ast0.call(
            ast0.lookup(namesBi[op]),
            [oldExpr, expr]
        );
    };
}

Expr5a = expr:Expr6 more:(_ More5a)* {
    return apply(expr, more);
}
More5a = op:('*' / '/' / '%') _ expr:Expr6 {
    return (oldExpr) => {
        return ast0.call(
            ast0.lookup(namesBi[op]),
            [oldExpr, expr]
        );
    };
}

Expr5b = expr:Expr6 more:(_ More5b)* {
    return apply(expr, more);
}
More5b = op:(
    $('shl' _k) / $('shr' _k) / $('rol' _k) / $('ror' _k)
) _ expr:Expr6 {
    return (oldExpr) => {
        return ast0.call(
            ast0.lookup(namesBi[op]),
            [oldExpr, expr]
        );
    };
}

Expr6 = more:(More6 _)* expr:ExprP {
    return apply(expr, more);
}
More6 = op:('+' / '-' / '~') {
    return (expr) => {
        return ast0.call(
            ast0.lookup(namesMono[op]),
            [expr]
        );
    };
}

ExprP = expr:(
    Bracket / Literal / Symbol / Lookup / Code
) actions:(
    _ Path / _ Call
)* {
    return apply(expr, actions);
}

Bracket = '(' _ expr:Expr _ ')' {
    return expr;
}

Literal = Unsigned / Float / Int / String / Array / Map
Unsigned = str:$(
    '0' [Xx] [0-9A-Fa-f]+
) {
    return ast0.literal(parseInt(str, 16), 'unsigned');
}
Float = str:$(
    ([0-9]+ '.' [0-9]* / [0-9]* '.' [0-9]+)
    ([Ee] ('+' / '-')? [0-9]+)? /
    [0-9]+ [Ee] ('+' / '-')? [0-9]+
) {
    return ast0.literal(parseFloat(str), 'float');
}
Int = str:$(
    [0-9]+
) {
    return ast0.literal(parseInt(str, 10), 'int');
}
String = str:$(
    '\'' ([^'\\\r\n] / '\\' [^\r\n])* '\'' /
    '"' ([^"\\\r\n] / '\\' [^\r\n])* '"' // '
) {
    return ast0.literal(eval(str), 'string'); // TODO: remove eval
} / '`' raw:$([^`]*) '`' {
    return ast0.literal(raw, 'string');
}
Array = '???' { // TODO
}
Map = '???' { // TODO
}

Symbol = mode:Mode _ name:Name {
    return ast0.symbol(name, mode);
}

Lookup = name:Name {
    return ast0.lookup(name);
}

Code = $('func' _k) _ body:FuncBody {
    return body;
} / $('func' _k) _ name:Name _ body:FuncBody {
    return ast0.call(
        ast0.lookup('__assign'),
        [
            ast0.symbol(name, 'const'),
            body,
        ]
    );
}
FuncBody = '(' params:(
    _ Param (_ ',' _ Param)* (_ ',' _ (Param / VA))? (_ ',')?
)? _ ')' extend:(
    _ $('extends' _k) _ '(' _ Expr _ ')'
)? _ impl:(Block / Expr) {
    params = flatten(params, 'object');
    extend = flatten(extend, 'object');

    let paramNames = [];
    let paramModes = [];
    let vaMode = '';

    for (const i in params) {
        if (params[i].name === '...') {
            vaMode = params[i].mode;
        } else {
            paramNames.push(params[i].name);
            paramModes.push(params[i].mode);
        }
    }

    return ast0.code(
        extend.length === 1
            ? extend[0]
            : ast0.lookup('__self'),
        paramNames, paramModes, vaMode,
        impl
    );
}
Param = mode:Mode _ name:Name {
    return {
        name: name,
        mode: mode,
    };
} / name: Name {
    return {
        name: name,
        mode: 'const',
    };
}
VA = mode:Mode _ '...' {
    return {
        name: '...',
        mode: mode,
    };
} / '...' {
    return {
        name: '...',
        mode: 'const',
    };
}

Path = '.' _ name:Name {
    return (upper) => {
        return ast0.path(upper, name);
    };
}

Call = '(' args:(
    _ Expr (_ ',' _ Expr)* (_ ',')?
)? _ ')' {
    args = flatten(args, 'object');

    return (callee) => {
        return ast0.call(callee, args);
    };
}

Name = $(str:$([A-Za-z_]+ [0-9A-Za-z_]*) !{
    return keywords[str];
})

Mode = $('const' _k) / $('out' _k) / $('var' _k) / $('dep' _k) / $('ret' _k)

_k = ![0-9A-Za-z_] {
    return null;
}

_ = ('//' [^\r\n]* / [ \t\r\n])* {
    return null;
}
